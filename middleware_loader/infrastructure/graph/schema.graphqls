type Query {
    user: User
    users: [User]!
}

type Mutation {
    signin(input: SigninInput!): AuthTokenResponse!
    gaiaAutoSignin(input: SigninInput!): AuthTokenResponse!
    checkToken(input: TokenInput!): TokenResponse!
    checkPermission(input: UserPermissionInput!): UserPermissionResponse!
}

## Authentication Service

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  password: String!
  enabled: Boolean!
  isUsing2FA: Boolean!
  secret: String!

#  roles: [Role!]!
#  privileges: [Privilege!]!

  createdAt: String!
  updatedAt: String!
}

#type Role {
#  id: ID!
#  name: String!
#
#  privilege: [Privilege!]!
#  user: User!
#
#  createdAt: String!
#  updatedAt: String!
#}
#
#type Privilege {
#  id: ID!
#  name: String!
#
#  role: [Role!]!
#
#  createdAt: String!
#  updatedAt: String!
#}
#
#type AuthToken {
#  id: ID!
#  token: String!
#  tokenType: String!
#  expiryDate: String!
#
#  user: User!
#}
#
### Task Manager
#
#type Project {
#  id: ID!
#  name: String!
#  description: String!
#  status: String!
#  color: String!
#
#  groupTasks: [GroupTask!]!
#  owner: User!
#
#  createdAt: String!
#  updatedAt: String!
#}
#
#type GroupTask {
#  id: ID!
#  title: String!
#  description: String!
#  priority: [String!]!
#  status: String!
#  ordinalNumber: Int!
#
#  project: Project!
#  tasks: [Task!]!
#  totalTasks: Int!
#  totalTasksCompleted: Int!
#
#  createdAt: String!
#  updatedAt: String!
#}
#type Task {
#  id: ID!
#  title: String!
#  description: String!
#  priority: [String!]!
#  status: String!
#  startDate: String!
#  deadline: String!
#  duration: Int!
#
#  createdAt: String!
#  updatedAt: String!
#
#  groupTask: GroupTask!
#  subTasks: [SubTask!]!
#  comments: [Comment!]!
#}
#
#type SubTask {
#  id: ID!
#  mission: String!
#  deadline: String!
#  priority: [String!]!
#  status: String!
#
#  createdAt: String!
#  updatedAt: String!
#
#  task: Task!
#}
#
#type Comment {
#  id: ID!
#  content: String!
#
#  createdAt: String!
#  updatedAt: String!
#
#  task: Task!
#}

# Auth Objects
input SigninInput {
    username: String!
    password: String!
}

type AuthTokenResponse {
    accessToken: String!
    refreshToken: String!
    name: String!
    username: String!
    email: String!
    lastLogin: String!
    bossType: String!
    role: String!
    gaiaHealth: String!
}

input TokenInput {
  token: String!
}

type TokenResponse {
  id: ID!
  username: String!
  accessToken: String!
  expiryDate: String!
}

input UserPermissionInput {
  userId: ID!
  permissionId: String!
}

type UserPermissionResponse {
  id: ID!
  name: String!
}