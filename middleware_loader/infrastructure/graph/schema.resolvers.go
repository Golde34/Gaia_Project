package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"middleware_loader/core/services"
	"middleware_loader/infrastructure/graph/model"
)

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, input model.SigninInput) (*model.AuthTokenResponse, error) {
	authToken, err := authService.Signin(ctx, input)
	return &authToken, err
}

// GaiaAutoSignin is the resolver for the gaiaAutoSignin field.
func (r *mutationResolver) GaiaAutoSignin(ctx context.Context, input model.SigninInput) (*model.AuthTokenResponse, error) {
	authToken, err := authService.GaiaAutoSignin(ctx, input)
	return &authToken, err
}

// CheckToken is the resolver for the checkToken field.
func (r *mutationResolver) CheckToken(ctx context.Context, input model.TokenInput) (*model.TokenResponse, error) {
	authToken, err := authService.CheckToken(ctx, input)
	return &authToken, err
}

// CheckPermission is the resolver for the checkPermission field.
func (r *mutationResolver) CheckPermission(ctx context.Context, input model.UserPermissionInput) (*model.UserPermissionResponse, error) {
	panic(fmt.Errorf("not implemented: CheckPermission - checkPermission"))
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*model.Project, error) {
	project, err := projectService.CreateProject(ctx, input)
	return &project, err
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input model.UpdateProjectInput) (*model.Project, error) {
	project, err := projectService.UpdateProject(ctx, input)
	return &project, err
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, input model.IDInput) (*model.Project, error) {
	project, err := projectService.DeleteProject(ctx, input)
	return &project, err
}

// UpdateProjectName is the resolver for the updateProjectName field.
func (r *mutationResolver) UpdateProjectName(ctx context.Context, input model.UpdateObjectNameInput) (*model.Project, error) {
	project, err := projectService.UpdateProjectName(ctx, input)
	return &project, err
}

// UpdateProjectColor is the resolver for the updateProjectColor field.
func (r *mutationResolver) UpdateProjectColor(ctx context.Context, input model.UpdateColorInput) (*model.Project, error) {
	project, err := projectService.UpdateProjectColor(ctx, input)
	return &project, err
}

// ArchiveProject is the resolver for the archiveProject field.
func (r *mutationResolver) ArchiveProject(ctx context.Context, input model.IDInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: ArchiveProject - archiveProject"))
}

// EnableProject is the resolver for the enableProject field.
func (r *mutationResolver) EnableProject(ctx context.Context, input model.IDInput) (*model.Project, error) {
	project, err := projectService.EnableProject(ctx, input)
	return &project, err
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	task, err := taskService.CreateTask(ctx, input)
	return &task, err
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTaskInput) (*model.Task, error) {
	task, err := taskService.UpdateTask(ctx, input)
	return &task, err
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, input model.IDInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// GenerateTaskWithoutGroupTask is the resolver for the generateTaskWithoutGroupTask field.
func (r *mutationResolver) GenerateTaskWithoutGroupTask(ctx context.Context, input model.GenerateTaskWithoutGroupTaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: GenerateTaskWithoutGroupTask - generateTaskWithoutGroupTask"))
}

// UpdateTaskInDialog is the resolver for the updateTaskInDialog field.
func (r *mutationResolver) UpdateTaskInDialog(ctx context.Context, input model.UpdateTaskInDialogInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UpdateTaskInDialog - updateTaskInDialog"))
}

// MoveTask is the resolver for the moveTask field.
func (r *mutationResolver) MoveTask(ctx context.Context, input model.MoveTaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: MoveTask - moveTask"))
}

// ArchiveTask is the resolver for the archiveTask field.
func (r *mutationResolver) ArchiveTask(ctx context.Context, input model.IDInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: ArchiveTask - archiveTask"))
}

// Enable is the resolver for the enable field.
func (r *mutationResolver) Enable(ctx context.Context, input model.IDInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: Enable - enable"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UserByID - userById"))
}

// ListAllProjects is the resolver for the listAllProjects field.
func (r *queryResolver) ListAllProjects(ctx context.Context) ([]*model.Project, error) {
	projects, err := projectService.ListAll(ctx)
	modelProject := []*model.Project{}
	for _, project := range projects {
		projectCopy := project
		modelProject = append(modelProject, &projectCopy)
	}
	return modelProject, err
}

// GetProjectByID is the resolver for the getProjectById field.
func (r *queryResolver) GetProjectByID(ctx context.Context, input model.IDInput) (*model.Project, error) {
	project, err := projectService.GetById(ctx, input.ID)
	return &project, err
}

// ListAllTasks is the resolver for the listAllTasks field.
func (r *queryResolver) ListAllTasks(ctx context.Context) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: ListAllTasks - listAllTasks"))
}

// GetTaskByID is the resolver for the getTaskById field.
func (r *queryResolver) GetTaskByID(ctx context.Context, input model.IDInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: GetTaskByID - getTaskById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
var authService = services.NewAuthService()
var taskService = services.NewTaskService()
var projectService = services.NewProjectService()
